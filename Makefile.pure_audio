# ============================================================================
# PURE AUDIO LEARNING - No APIs, No Text, Just Audio
# ============================================================================

CXX = g++
CXXFLAGS = -std=c++17 -O3 -Wall -Wextra -I.
LDFLAGS = -pthread

# Directories
AUDIO_DIR = melvin/audio
CORE_DIR = melvin/core
EXAMPLES_DIR = melvin/examples
BUILD_DIR = build

# Source files
CORE_SOURCES = $(CORE_DIR)/atomic_graph.cpp
AUDIO_SOURCES = $(AUDIO_DIR)/audio_tokenizer.cpp
EXAMPLE_SOURCE = $(EXAMPLES_DIR)/pure_audio_learning.cpp

# Object files
CORE_OBJECTS = $(BUILD_DIR)/atomic_graph.o
AUDIO_OBJECTS = $(BUILD_DIR)/audio_tokenizer.o
EXAMPLE_OBJECT = $(BUILD_DIR)/pure_audio_learning.o

# Target
TARGET = pure_audio_learning

# ============================================================================
# MAIN TARGETS
# ============================================================================

.PHONY: all clean run help

all: $(TARGET)
	@echo "✅ Pure audio learning built successfully"
	@echo "   No APIs • No Text • Pure Audio Tokenization"

$(TARGET): $(CORE_OBJECTS) $(AUDIO_OBJECTS) $(EXAMPLE_OBJECT)
	@echo "🔗 Linking pure audio learning..."
	$(CXX) $(CXXFLAGS) $^ -o $@ $(LDFLAGS)
	@echo "✅ Built: $@"

# ============================================================================
# OBJECT FILES
# ============================================================================

$(BUILD_DIR)/%.o: $(CORE_DIR)/%.cpp | $(BUILD_DIR)
	@echo "🔨 Compiling $<..."
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(BUILD_DIR)/%.o: $(AUDIO_DIR)/%.cpp | $(BUILD_DIR)
	@echo "🔨 Compiling $<..."
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(BUILD_DIR)/%.o: $(EXAMPLES_DIR)/%.cpp | $(BUILD_DIR)
	@echo "🔨 Compiling $<..."
	$(CXX) $(CXXFLAGS) -c $< -o $@

# ============================================================================
# DIRECTORY CREATION
# ============================================================================

$(BUILD_DIR):
	@mkdir -p $(BUILD_DIR)

# ============================================================================
# CONVENIENCE TARGETS
# ============================================================================

run: $(TARGET)
	@echo ""
	@./$(TARGET) 6

# ============================================================================
# CLEANUP
# ============================================================================

clean:
	@echo "🧹 Cleaning build artifacts..."
	rm -rf $(BUILD_DIR)
	rm -f $(TARGET)
	rm -f pure_audio_nodes.bin pure_audio_edges.bin
	@echo "✅ Clean complete"

# ============================================================================
# HELP
# ============================================================================

help:
	@echo "╔═══════════════════════════════════════════════════════════╗"
	@echo "║  PURE AUDIO LEARNING - Build System                      ║"
	@echo "╚═══════════════════════════════════════════════════════════╝"
	@echo ""
	@echo "Philosophy:"
	@echo "  - Audio IS the data (not text)"
	@echo "  - Sound patterns are vocabulary"
	@echo "  - No APIs, no external services"
	@echo "  - Pure local audio→graph learning"
	@echo ""
	@echo "Targets:"
	@echo "  make all      - Build pure audio learning"
	@echo "  make run      - Build and run all demos"
	@echo "  make clean    - Remove build artifacts"
	@echo "  make help     - Show this help"
	@echo ""
	@echo "Demos:"
	@echo "  ./pure_audio_learning 1    - Basic tokenization"
	@echo "  ./pure_audio_learning 2    - Pattern recognition"
	@echo "  ./pure_audio_learning 3    - Temporal learning"
	@echo "  ./pure_audio_learning 4    - Multi-sound"
	@echo "  ./pure_audio_learning 5    - Memory recall"
	@echo "  ./pure_audio_learning 6    - Run all"
	@echo ""

