# ============================================================================
# MELVIN COGNITIVE SPEECH - Build System
# ============================================================================

CXX = g++
CXXFLAGS = -std=c++17 -O3 -Wall -Wextra -I.
LDFLAGS = -pthread

# Check for PortAudio
PORTAUDIO_LIBS = $(shell pkg-config --libs portaudio-2.0 2>/dev/null || echo "-lportaudio")
PORTAUDIO_CFLAGS = $(shell pkg-config --cflags portaudio-2.0 2>/dev/null)

# Directories
IO_DIR = melvin/io
AUDIO_DIR = melvin/audio
CORE_DIR = melvin/core
EXAMPLES_DIR = melvin/examples
TESTS_DIR = melvin/tests
BUILD_DIR = build

# Source files
CORE_SOURCES = $(CORE_DIR)/atomic_graph.cpp
AUDIO_SOURCES = $(AUDIO_DIR)/audio_pipeline.cpp $(AUDIO_DIR)/audio_bridge.cpp
IO_SOURCES = $(IO_DIR)/speech_intent.cpp $(IO_DIR)/text_to_speech_graph.cpp
DEMO_SOURCE = $(EXAMPLES_DIR)/melvin_cognitive_speech.cpp
TEST_SOURCE = $(TESTS_DIR)/test_speech_intent.cpp

# Object files
CORE_OBJECTS = $(BUILD_DIR)/atomic_graph.o
AUDIO_OBJECTS = $(BUILD_DIR)/audio_pipeline.o $(BUILD_DIR)/audio_bridge.o
IO_OBJECTS = $(BUILD_DIR)/speech_intent.o $(BUILD_DIR)/text_to_speech_graph.o

# Targets
DEMO_TARGET = demo_cognitive_speech
TEST_TARGET = test_speech_intent

# ============================================================================
# MAIN TARGETS
# ============================================================================

.PHONY: all clean demo test run-demo run-test complete help

all: $(DEMO_TARGET) $(TEST_TARGET)
	@echo "✅ Cognitive speech system built successfully"

demo: $(DEMO_TARGET)
	@echo "✅ Cognitive speech demo built"

test: $(TEST_TARGET)
	@echo "✅ Speech intent tests built"

# ============================================================================
# BUILD RULES
# ============================================================================

$(DEMO_TARGET): $(CORE_OBJECTS) $(AUDIO_OBJECTS) $(IO_OBJECTS) $(BUILD_DIR)/melvin_cognitive_speech.o
	@echo "🔗 Linking cognitive speech demo..."
	$(CXX) $(CXXFLAGS) $^ -o $@ $(LDFLAGS) $(PORTAUDIO_LIBS)
	@echo "✅ Built: $@"

$(TEST_TARGET): $(CORE_OBJECTS) $(AUDIO_OBJECTS) $(IO_OBJECTS) $(BUILD_DIR)/test_speech_intent.o
	@echo "🔗 Linking speech intent tests..."
	$(CXX) $(CXXFLAGS) $^ -o $@ $(LDFLAGS) $(PORTAUDIO_LIBS)
	@echo "✅ Built: $@"

# ============================================================================
# OBJECT FILES
# ============================================================================

$(BUILD_DIR)/%.o: $(CORE_DIR)/%.cpp | $(BUILD_DIR)
	@echo "🔨 Compiling $<..."
	$(CXX) $(CXXFLAGS) $(PORTAUDIO_CFLAGS) -c $< -o $@

$(BUILD_DIR)/%.o: $(AUDIO_DIR)/%.cpp | $(BUILD_DIR)
	@echo "🔨 Compiling $<..."
	$(CXX) $(CXXFLAGS) $(PORTAUDIO_CFLAGS) -c $< -o $@

$(BUILD_DIR)/%.o: $(IO_DIR)/%.cpp | $(BUILD_DIR)
	@echo "🔨 Compiling $<..."
	$(CXX) $(CXXFLAGS) $(PORTAUDIO_CFLAGS) -c $< -o $@

$(BUILD_DIR)/%.o: $(EXAMPLES_DIR)/%.cpp | $(BUILD_DIR)
	@echo "🔨 Compiling $<..."
	$(CXX) $(CXXFLAGS) $(PORTAUDIO_CFLAGS) -c $< -o $@

$(BUILD_DIR)/%.o: $(TESTS_DIR)/%.cpp | $(BUILD_DIR)
	@echo "🔨 Compiling $<..."
	$(CXX) $(CXXFLAGS) $(PORTAUDIO_CFLAGS) -c $< -o $@

# ============================================================================
# DIRECTORY CREATION
# ============================================================================

$(BUILD_DIR):
	@mkdir -p $(BUILD_DIR)

# ============================================================================
# CONVENIENCE TARGETS
# ============================================================================

run-demo: $(DEMO_TARGET)
	@echo ""
	@./$(DEMO_TARGET) 6

run-test: $(TEST_TARGET)
	@echo ""
	@./$(TEST_TARGET)

# Build, test, and run
complete: all run-test run-demo
	@echo ""
	@echo "✅ Complete cognitive speech system verified"

# ============================================================================
# CLEANUP
# ============================================================================

clean:
	@echo "🧹 Cleaning build artifacts..."
	rm -rf $(BUILD_DIR)
	rm -f $(DEMO_TARGET) $(TEST_TARGET)
	rm -f cognitive_speech_nodes.bin cognitive_speech_edges.bin
	rm -f conversation_memory_nodes.bin conversation_memory_edges.bin
	rm -f test_speech_nodes.bin test_speech_edges.bin
	rm -f melvin_last_speech.txt
	@echo "✅ Clean complete"

# ============================================================================
# HELP
# ============================================================================

help:
	@echo "╔═══════════════════════════════════════════════════════════╗"
	@echo "║  MELVIN COGNITIVE SPEECH - Build System                  ║"
	@echo "╚═══════════════════════════════════════════════════════════╝"
	@echo ""
	@echo "Targets:"
	@echo "  make all         - Build demo and tests"
	@echo "  make demo        - Build cognitive speech demo"
	@echo "  make test        - Build test suite"
	@echo "  make run-demo    - Build and run demo (all scenarios)"
	@echo "  make run-test    - Build and run tests"
	@echo "  make complete    - Build, test, and demo everything"
	@echo "  make clean       - Remove build artifacts"
	@echo "  make help        - Show this help message"
	@echo ""
	@echo "Components:"
	@echo "  - SpeechIntent:         Cognitive speech processing"
	@echo "  - TextToSpeechGraph:    TTS with graph integration"
	@echo "  - Self-recognition:     Melvin recognizes own voice"
	@echo ""
	@echo "Examples:"
	@echo "  make complete                    # Full workflow"
	@echo "  ./demo_cognitive_speech 1        # Basic demo"
	@echo "  ./test_speech_intent             # Run tests"
	@echo ""

